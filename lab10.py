# -*- coding: utf-8 -*-
"""lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dNq8ZUJAWz2f-1Qn6aeH34r16woHYSc4
"""

import tensorflow as tf
fashion_mnist = tf.keras.datasets.fashion_mnist
(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()
assert X_train.shape == (60000, 28, 28)
assert X_test.shape == (10000, 28, 28)
assert y_train.shape == (60000,)
assert y_test.shape == (10000,)

import numpy as np

np.max(X_train[0])

X_train = X_train / 255
X_test = X_test / 255

import matplotlib.pyplot as plt 
plt.imshow(X_train[164], cmap="binary")
plt.axis('off')
plt.show()

class_names = ["koszulka", "spodnie", "pulower", "sukienka", "kurtka",
               "sanda≈Ç", "koszula", "but", "torba", "kozak"]
class_names[y_train[142]]

import tensorflow as tf
from tensorflow import keras

model = keras.models.Sequential()
model.add(keras.layers.Flatten(input_shape=[28,28]))
model.add(keras.layers.Dense(300, activation="relu"))
model.add(keras.layers.Dense(100, activation="relu"))
model.add(keras.layers.Dense(10, activation="softmax"))

model.compile(loss="sparse_categorical_crossentropy",
              optimizer="sgd",
              metrics=["accuracy"])

import os
root_logdir = os.path.join(os.curdir, "image_logs")
def get_run_logdir(): 
    import time
    run_id = time.strftime("run_%Y_%m_%d-%H_%M_%S") 
    return os.path.join(root_logdir, run_id)
run_logdir = get_run_logdir()
tensorboard_cb = tf.keras.callbacks.TensorBoard(run_logdir)

model.fit(X_train, y_train, epochs=20, validation_split=0.1, callbacks=tensorboard_cb)

model.predict(X_test)

model.summary()
tf.keras.utils.plot_model(model, "fashion_mnist.png", show_shapes=True)

image_index = np.random.randint(len(X_test))
image = np.array([X_test[image_index]])
confidences = model.predict(image)
confidence = np.max(confidences[0])
prediction = np.argmax(confidences[0])
print("Prediction:", class_names[prediction])
print("Confidence:", confidence)
print("Truth:", class_names[y_test[image_index]])
plt.imshow(image[0], cmap="binary")
plt.axis('off')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir ./image_logs

model.save('fashion_clf.h5')

from sklearn.datasets import fetch_california_housing 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import StandardScaler
housing = fetch_california_housing()

X_train_full, X_test, y_train_full, y_test = train_test_split(housing.data, housing.target)
X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_valid = scaler.transform(X_valid)
X_test = scaler.transform(X_test)

model = keras.models.Sequential()
model.add(keras.layers.Dense(30, activation="relu"))
model.add(keras.layers.Dense(1))
model.compile(loss="MSE",
              optimizer="sgd",)

es = tf.keras.callbacks.EarlyStopping(patience=5,
                                      min_delta=0.01,verbose=1)

model.fit(X_train, y_train, validation_data=(X_valid,y_valid), epochs=100,  callbacks=[tensorboard_cb,es])

model.save("reg_housing_1.h5")

model = keras.models.Sequential()
model.add(keras.layers.Dense(50, activation="relu"))
model.add(keras.layers.Dense(210, activation="relu"))
model.add(keras.layers.Dense(1))
model.compile(loss="MSE",
              optimizer="sgd",)

es = tf.keras.callbacks.EarlyStopping(patience=5,
                                      min_delta=0.01,verbose=1)

model.fit(X_train, y_train, validation_data=(X_valid,y_valid), epochs=100,  callbacks=[tensorboard_cb,es])

model.save("reg_housing_2.h5")

model = keras.models.Sequential()
model.add(keras.layers.Dense(50, activation="relu"))
model.add(keras.layers.Dense(25, activation="linear"))
model.add(keras.layers.Dense(210, activation="relu"))
model.add(keras.layers.Dense(1))
model.compile(loss="MSE",
              optimizer="sgd",)

es = tf.keras.callbacks.EarlyStopping(patience=5,
                                      min_delta=0.01,verbose=1)

model.fit(X_train, y_train, validation_data=(X_valid,y_valid), epochs=100,  callbacks=[tensorboard_cb,es])

model.save("reg_housing_3.h5")